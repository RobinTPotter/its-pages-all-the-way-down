<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 744.0945 1052.3622">
    <defs>
        <image id="cat_image" xlink:href="ivy.png" width="100%" height="100%"/>
        <path id="cross" d="M -20 -20 L 0 0 M 20 -20 L -20 20" style="fill:none;stroke:#000;stroke-width:2"></path>
    </defs>


    <g id="card">
            <g>
                <rect x="0" y="0" width="1000" height="2000" style="fill:#eee;stroke:#000;stroke-width:2"></rect>
                
                <g id="topsquare" transform="translate(100 100)">
                    <rect x="0" y="0" width="800" height="800" style="fill:#fff;stroke:#000;stroke-width:2"></rect>
                    <g id="topsquare_int">
                    </g>
                </g>
                <g id="bottomsquare" transform="translate(100 1100) rotate(180 400 400)  ">
                    <rect x="0" y="0" width="800" height="800" style="fill:#fff;stroke:#000;stroke-width:2"></rect>
                    <g id="bottomsquare_int">
                    </g>
                </g>
                
               <!-- <text x="100" y="100" id="topone" style="font-size:110px;font-style:serif;font-weight:bold;fill:none;stroke:#000;stroke-width:3">X</text>
                <text x="100" y="1900" id="bottomone" style="font-size:110px;font-style:serif;font-weight:bold;fill:none;stroke:#000;stroke-width:3">Y</text> -->
            </g>
    </g>

    <g id="main_panel" transform="scale(0.9)">
        <g id="deck">
        </g>

    </g>

    <script id="main_script" type="text/javascript"><![CDATA[

        ///twitch();


        // main parameters
        // main_scale should be adjusted according to paper size
        // print preview and rough test print a very important
        var spacing_x = 60
        var spacing_y = 60
        var num_cardsx = 4
        var num_cardsy = 3
        var main_scale = 0.80

        var pos = 0
        var cards_per_page = num_cardsx * num_cardsy

        var deck_offset_x = spacing_x / 2
        var deck_offset_y = spacing_y / 2
        var deck_scale = 1 / (num_cardsx+1)

        var deck = document.getElementById('deck')
        deck.setAttribute('transform','scale('+deck_scale+') translate('+deck_offset_x+' '+deck_offset_y+')')

        var main_panel = document.getElementById('main_panel')
        main_panel.setAttribute('transform','scale('+main_scale+')')

        var ns = 'http://www.w3.org/2000/svg'

        for (var llx=0;llx<num_cardsx;llx++) {
            for (var lly=0;lly<num_cardsy;lly++) {

                var vline = document.createElementNS(ns, 'line')
                vline.setAttribute('id', 'vline'+llx)
                vline.setAttribute('x1', (llx+1)*(1000 + spacing_x) - spacing_x/2)
                vline.setAttribute('x2', (llx+1)*(1000 + spacing_x) - spacing_x/2)
                vline.setAttribute('y1','0')
                vline.setAttribute('y2',(2000 + spacing_y/2)* num_cardsx + deck_offset_y/2 )
                vline.setAttribute('style','stroke:#000;stroke-width:1;stroke-linecap:round;stroke-dasharray:10,100;fill:none')
                deck.appendChild(vline)

                var hline = document.createElementNS(ns, 'line')
                vline.setAttribute('id', 'hline'+lly)
                hline.setAttribute('y1', (lly+1)*(2000 + spacing_y) - spacing_y/2)
                hline.setAttribute('y2', (lly+1)*(2000 + spacing_y) - spacing_y/2)
                hline.setAttribute('x1','0')
                hline.setAttribute('x2',(1000 + spacing_x/2)* num_cardsy  + deck_offset_x/2  )
                hline.setAttribute('style','stroke:#000;stroke-width:1;stroke-linecap:round;stroke-dasharray:10,100;fill:none')
                deck.appendChild(hline)

            }
        }

        //main card object (deleted at end of script)

        function getcat(x,y) {       
            var xmlns = 'http://www.w3.org/2000/svg'
            var xlinkns = 'http://www.w3.org/1999/xlink'
            var cat = document.createElementNS(xmlns, 'image')
            cat.setAttributeNS(xlinkns,'href',`ivy.png?nobby=${card_count}`);
            cat.setAttributeNS(null, 'width','30%')
            cat.setAttributeNS(null, 'height','30%')
            cat.setAttributeNS(null, 'x',`${x}`)
            cat.setAttributeNS(null, 'y',`${y}`)
            //cat.setAttributeNS(null, 'id', Math.random())
            return cat
        }
        
        
        function twos(wherenode) {        
            wherenode.appendChild(getcat(530,-20))            
            wherenode.appendChild(getcat(20,490)) 
        }
        
        function corner_cats(wherenode) { 
            wherenode.appendChild(getcat(20,-20))   
            twos(wherenode)
            wherenode.appendChild(getcat(530,490))  
        }

        function sixths(wherenode) {
            wherenode.appendChild(getcat(20,225))   
            wherenode.appendChild(getcat(530,225)) 
        }

        function seventh(wherenode) {
            wherenode.appendChild(getcat(275,225))  
        }

        //change main card and clone and put in deck group
        function createcard(aa) {
            //suit(pattern)
            //value(val)
            
            var card = document.getElementById('card')
            card.style.visibility = 'visible'
            //document.getElementById('topone').textContent = String(aa[0])
            //document.getElementById('bottomone').textContent = String(aa[1])
                       
            var topsquare = document.getElementById('topsquare_int')
            
            
            //console.log(topsquare)
            
            if (aa[0]==1) {
                seventh(topsquare)
            } else if (aa[0]==2) {
                twos(topsquare)
            } else if (aa[0]==3) {
                seventh(topsquare)
                twos(topsquare)
            } else if (aa[0]==4) {
                corner_cats(topsquare)
            } else if (aa[0]==5) {
                seventh(topsquare)
                corner_cats(topsquare)
            } else if (aa[0]==6) {
                corner_cats(topsquare)
                sixths(topsquare)
            } 
            
            
            var bottomsquare = document.getElementById('bottomsquare_int')
                     
               
            if (aa[1]==1) {
                seventh(bottomsquare)
            } else if (aa[1]==2) {
                twos(bottomsquare)
            } else if (aa[1]==3) {
                seventh(bottomsquare)
                twos(bottomsquare)
            } else if (aa[1]==4) {
                corner_cats(bottomsquare)
            } else if (aa[1]==5) {
                seventh(bottomsquare)
                corner_cats(bottomsquare)
            } else if (aa[1]==6) {
                corner_cats(bottomsquare)
                sixths(bottomsquare)
            } 
                       
            
            
            var hello = card.cloneNode(true) 
            
            while (bottomsquare.childElementCount>0) {
                bottomsquare.children[0].remove()
            }
             while (topsquare.childElementCount>0) {
                topsquare.children[0].remove()
            }
            
            
            
            hello.id = (new Date).getTime()
            hello.setAttribute('transform','translate('+((spacing_x+1000)*(pos % num_cardsx))+' '+((spacing_y+2000)*Math.floor(pos/num_cardsx))+')');
           // console.log(hello)
            var deck = document.getElementById('deck')
            deck.appendChild(hello)
            card.style.visibility = 'hidden'
            pos++
        }

        // page number unless comes from parameter
        page_number=0

        //count of cards printed
        card_count=0

        //get the page number from parameter
        if (window.location.search) {
            re = /\?page=(\d+)[&]*/;
            page_number =Number( window.location.search.match(re)[1] )
            //alert(page_number)
        } else {
            // no page number, run test page
            page_number=0
        }
        
            v = []
            //all numbers and extra each suit
            for (var n1=0;n1<7;n1++) {
                for (var n2=n1;n2<7;n2++) v.push([n1,n2])
            }
            
        //print cards only to fill page
        for (var vv=0;vv<v.length;vv++) {
            if (card_count>=page_number*cards_per_page && card_count<(page_number+1)*cards_per_page) createcard(v[vv])
            card_count++
        }


        document.getElementsByTagName('svg')[0].removeChild(document.getElementById('card'))
        //console.log(document.getElementsByTagName('svg')[0])

    ]]>
    </script>
    <script type="text/javascript">
    <![CDATA[
        document.getElementsByTagName('svg')[0].removeChild(document.getElementById('main_script'))
    ]]>
    </script>


</svg>
