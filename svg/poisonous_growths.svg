<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 744.0945 1052.3622">
    <defs>
        <path id="cross" d="M -20 -20 L 0 0 M 20 -20 L -20 20" style="fill:none;stroke:#000;stroke-width:2"></path>
        <pattern id="p_squares" x="5" y="0" width="50" height="50" patternUnits="userSpaceOnUse" patternTransform="scale(2)">
            <rect x="10" y="10" width="30" height="30" style="fill:#ddd;stroke:#aaa" />
            <rect x="0" y="0" width="30" height="30" style="fill:#fff;stroke:#aaa;stroke-width:1" />
        </pattern>
    </defs>


    <g id="card" transform="scale(0.7)">
        <g>
            <g transform="translate(-20 -20) rotate(0)"><use xlink:href="#cross" x="0" y="0"/></g>
            <g transform="translate(1020 1430) rotate(180)"><use xlink:href="#cross" x="0" y="0"/></g>
            <g transform="translate(1020 -20) rotate(90)"><use xlink:href="#cross" x="0" y="0"/></g>
            <g transform="translate(-20 1430) rotate(270)"><use xlink:href="#cross" x="0" y="0"/></g>

            <g transform="translate(510 -25) rotate(45)"><use xlink:href="#cross" x="0" y="0"/></g>
            <g transform="translate(-25 715) rotate(315)"><use xlink:href="#cross" x="0" y="0"/></g>
            <g transform="translate(1025 715) rotate(135)"><use xlink:href="#cross" x="0" y="0"/></g>
            <g transform="translate(510 1435) rotate(225)"><use xlink:href="#cross" x="0" y="0"/></g>

            <g class="insides">
                <rect x="0" y="0" width="1000" height="1410" style="fill:none;stroke:#000;stroke-width:15"></rect>
                <rect x="30" y="30" width="940" height="1350" style="fill:none;stroke:#000;stroke-width:5"></rect>
                <rect x="50" y="50" width="900" height="1310" style="fill:url(#p_squares);stroke:#000;stroke-width:5"></rect>
                <path id="bollocks" d="" style="fill:none;stroke:#000;stroke-width:12"></path>
                
                <text id="prop01" x="80" y="850"  style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:35">TEST</text>
                <text id="prop02" x="80" y="1000" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:35">TEST</text>
                <text id="prop03" x="80" y="1150" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:35">TEST</text>
                <text id="prop04" x="80" y="1300" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:35">TEST</text>
                
                <text id="prop11"   x="80" y="850"  style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#fff;stroke-width:15">TEST</text>
                <text id="prop12"   x="80" y="1000" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#fff;stroke-width:15">TEST</text>
                <text id="prop13"   x="80" y="1150" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#fff;stroke-width:15">TEST</text>
                <text id="prop14"   x="80" y="1300" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#fff;stroke-width:15">TEST</text>
                
                <text id="prop21" x="80" y="850"  style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:5">TEST</text>
                <text id="prop22" x="80" y="1000" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:5">TEST</text>
                <text id="prop23" x="80" y="1150" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:5">TEST</text>
                <text id="prop24" x="80" y="1300" style="font-size:110px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:5">TEST</text>
                
                <text id="tprop01" x="550" y="140"  style="font-size:80px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:35">poisonous</text>                
                <text id="tprop11" x="550" y="140"  style="font-size:80px;font-style:serif;font-weight:bold;fill:#000;stroke:#fff;stroke-width:15">poisonous</text>
                <text id="tprop21" x="550" y="140"  style="font-size:80px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:5">poisonous</text>
                                               
                <text id="tprop01" x="650" y="240"  style="font-size:80px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:35">growths</text>                
                <text id="tprop11" x="650" y="240"  style="font-size:80px;font-style:serif;font-weight:bold;fill:#000;stroke:#fff;stroke-width:15">growths</text>
                <text id="tprop21" x="650" y="240"  style="font-size:80px;font-style:serif;font-weight:bold;fill:#000;stroke:#000;stroke-width:5">growths</text>

                
            </g>
        </g>
    </g>

    <g id="main_panel" transform="scale(1.0)">
        <g id="deck"></g>
    </g>

    <script id="main_script" type="text/javascript"><![CDATA[

        ///twitch();

        var pos = 0
        var spacing_x = 1.12
        var spacing_y = 1.1
        var num_cards = 3
        var cards_per_page = num_cards * num_cards

        var deck_offset_x = 80
        var deck_offset_y = 141
        var deck_scale = 1 / (num_cards+1)

        var deck = document.getElementById('deck')
        deck.setAttribute('transform','scale('+deck_scale+') translate('+deck_offset_x+' '+deck_offset_y+')')

        var main_panel = document.getElementById('main_panel')
        main_panel.setAttribute('transform','scale(.88)')
        
        function rgbToHex(rgb) { 
          var hex = Number(Math.floor(rgb)).toString(16);
          if (hex.length < 2) {
               hex = "0" + hex;
          }
          return hex;
        }

        function fullColorHex(r,g,b) {   
          var red = rgbToHex(r);
          var green = rgbToHex(g);
          var blue = rgbToHex(b);
          return red+green+blue;
        }

        //change main card and clone and put in deck group
        function createcard(thing,runDeck) {

            var card = document.getElementById('card')
            card.style.visibility = 'visible'


            //create some path data to go in the bollocks path element
            data = ''
            
            BRANCHES = Math.floor(Math.random()*67 + 30)
            TENDRIL = Math.floor(Math.random()*26+5)
            POISON = Math.floor(Math.random() * 10)/10
            THICK = Math.floor(3 * (3 + Math.random() * 3))
            
            r =255 * POISON
            g = 255 - 255 * POISON
            b = 128 * POISON
            col = fullColorHex(r,g,b)
            
            for (var ii=0;ii<BRANCHES;ii++) {
                dirx = 1
                diry = 1
                startx = 500
                starty = 750
                L = 60
                data += `M ${startx} ${starty}`
                ax = 0
                ay = 0
                for (var jj=0;jj<TENDRIL;jj++) {                    
                    type = 'L'
                    bx = ( (L*Math.random()+20)*Math.cos(Math.random()*0.2 + ii/(3+Math.random())) )
                    by = ( (L*Math.random()+24)*Math.sin(Math.random()*0.2 + ii/(3+Math.random())) )
                    if ((startx+bx)>1000-100 || (startx+bx)<0+100) dirx *= -1
                    if ((starty+by)>1410-100 || (starty+by)<0+100) diry *= -1
                    startx += dirx * bx
                    starty += diry * by
                    data += ` ${type} ${startx} ${starty}`              
                }
                //console.log(ax,ay)
            }
            document.getElementById('bollocks').setAttribute('d',data)
            document.getElementById('bollocks').setAttribute('style',`stroke:#${col}; fill:none; stroke-width: ${THICK}`)
            
            for (var i=0;i<3;i++) { 
                document.getElementById('prop'+i+'1').textContent = `thick: ${THICK}`
                document.getElementById('prop'+i+'2').textContent = `tendril: ${TENDRIL}`
                document.getElementById('prop'+i+'3').textContent = `branches: ${BRANCHES}`
                document.getElementById('prop'+i+'4').textContent = `poison: ${POISON}`
            }
               
            for (var i=1;i<5;i++) { 
                xx=0//Math.random()*20
                document.getElementById('prop0'+i).setAttribute('y', 820 + i * 120 + xx)
                document.getElementById('prop1'+i).setAttribute('y', 820 + i * 120 + xx)
                document.getElementById('prop2'+i).setAttribute('y', 820 + i * 120 + xx)
                
                xx=0//Math.random()*20
                document.getElementById('prop0'+i).setAttribute('x', 80 + xx)
                document.getElementById('prop1'+i).setAttribute('x' ,80+ xx)
                document.getElementById('prop2'+i).setAttribute('x', 80 + xx)
            }
            
            
            
            

            if (!runDeck) {
                //clone main card and add to the "deck"
                var hello = card.cloneNode(true)
                hello.id = (new Date).getTime()
                hello.setAttribute('transform','translate('+(spacing_x*1000*(pos % num_cards))+' '+(spacing_y*1410*Math.floor(pos/num_cards))+')');

                var deck = document.getElementById('deck')
                deck.appendChild(hello)
                card.style.visibility = 'hidden'
                pos++
            }
        }

        // page number unless comes from parameter
        page_number=0

        //count of cards printed
        card_count=0
        
        //set up default values first 
        // no page number, run test page
        v = []
        //all numbers and extra each suit
        for (var nn=0;nn<8;nn++) v.push(String(nn))

    var page

        //get the page number from parameter
        if (window.location.search) {
            re = /\?page=(\d+)/;
            match = window.location.search.match(re) 
            if (match) {
                page_number = Number(match[1])
            } else {
                re = /\?page=(\w+)/;
                page = window.location.search.match(re)[1] 
            }
        }
        
        if (!page) {
        
            v = []
            for (var nn=0;nn<27;nn++) v.push(String(nn))

            //print cards only to fill page
            for (var vv=0;vv<v.length;vv++) {
                if (card_count>=page_number*cards_per_page && card_count<(page_number+1)*cards_per_page) createcard(v[vv])
                card_count++
            }

            document.getElementsByTagName('svg')[0].removeChild(document.getElementById('card'))
            //console.log(document.getElementsByTagName('svg')[0])
                
        } else {
            createcard(v[vv],1) 
        }
        
    ]]>
    </script>
    <script type="text/javascript">
    <![CDATA[
        document.getElementsByTagName('svg')[0].removeChild(document.getElementById('main_script'))
    ]]>
    </script>


</svg>
